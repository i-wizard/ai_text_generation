{
  "swagger": "2.0",
  "info": {
    "title": "AI Text Generator API",
    "description": "API for generating and storing AI-generated text.",
    "version": "1.0.0"
  },
  "host": "localhost:5001",
  "schemes": ["http"],
  "paths": {
    "/api/v1/auth/register": {
      "post": {
        "summary": "Register a new user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterSchema"
            }
          }
        ],
        "responses": {
          "200": { "description": "User registered successfully" },
          "400": { "description": "Invalid input" }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "summary": "Login user and get JWT token",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginSchema"
            }
          }
        ],
        "responses": {
          "200": { "description": "JWT token returned" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/api/v1/text-generations": {
      "post": {
        "summary": "Generate AI text",
        "description": "Sends a prompt to OpenAI and stores the generated response.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GenerateTextSchema"
            }
          }
        ],
        "responses": {
          "201": { "description": "AI-generated text created successfully" },
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/api/v1/text-generations/{id}": {
      "get": {
        "summary": "Retrieve AI-generated text",
        "description": "Fetches the stored AI-generated text by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": { "description": "Retrieved AI-generated text" },
          "404": { "description": "Text not found" }
        }
      },
      "put": {
        "summary": "Update AI-generated text",
        "description": "Updates an existing AI-generated text by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTextSchema"
            }
          }
        ],
        "responses": {
          "200": { "description": "Text updated successfully" },
          "400": { "description": "Invalid input" },
          "404": { "description": "Text not found" }
        }
      },
      "delete": {
        "summary": "Delete AI-generated text",
        "description": "Deletes an AI-generated text by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": { "description": "Text deleted successfully" },
          "404": { "description": "Text not found" }
        }
      }
    }
  },
  "definitions": {
    "RegisterSchema": {
      "type": "object",
      "properties": {
        "username": { "type": "string" },
        "password": { "type": "string" }
      }
    },
    "LoginSchema": {
      "type": "object",
      "properties": {
        "username": { "type": "string" },
        "password": { "type": "string" }
      }
    },
    "GenerateTextSchema": {
      "type": "object",
      "properties": {
        "prompt": { "type": "string", "example": "Write a poem about nature" }
      },
      "required": ["prompt"]
    },
    "UpdateTextSchema": {
      "type": "object",
      "properties": {
        "response": { "type": "string", "example": "Updated AI response text" }
      },
      "required": ["response"]
    }
  }
}
